import asyncio import json import logging from typing import Dict, Any from kafka import KafkaProducer, KafkaConsumer from redis import Redis import httpx from app.core.config import settings from app.services.scraper_service import ScraperService from app.services.data_processor import DataProcessor logger = logging.getLogger(__name__) class IngestionService: def __init__(self): self.producer = KafkaProducer( bootstrap_servers=settings.KAFKA_BROKERS.split(","), value_serializer=lambda v: json.dumps(v).encode("utf-8") ) self.consumer = KafkaConsumer( "raw_data", bootstrap_servers=settings.KAFKA_BROKERS.split(","), value_deserializer=lambda m: json.loads(m.decode("utf-8")) ) self.redis = Redis.from_url(settings.REDIS_URL) self.scraper = ScraperService() self.processor = DataProcessor() async def start_scraping(self): """Start the data ingestion process""" logger.info("Starting data ingestion service...") try: # Start scraping from multiple sources sources = [ "hackernews", "producthunt", "indiehackers", "techcrunch", "g2" ] for source in sources: await self.scrape_source(source) except Exception as e: logger.error(f"Error in ingestion service: {e}") async def scrape_source(self, source: str): """Scrape data from a specific source""" try: logger.info(f"Scraping data from {source}") raw_data = await self.scraper.scrape(source) if raw_data: # Send to Kafka for processing await self.send_to_kafka("raw_data", raw_data) logger.info(f"Successfully scraped {len(raw_data)} items from {source}") except Exception as e: logger.error(f"Error scraping {source}: {e}") async def send_to_kafka(self, topic: str, data: Dict[str, Any]): """Send data to Kafka topic""" try: future = self.producer.send(topic, data) await future logger.info(f"Data sent to Kafka topic: {topic}") except Exception as e: logger.error(f"Error sending to Kafka: {e}") async def run(self): """Main run loop""" while True: try: await self.start_scraping() # Wait for 1 hour before next scraping cycle await asyncio.sleep(3600) except Exception as e: logger.error(f"Error in main loop: {e}") await asyncio.sleep(60) if __name__ == "__main__": logging.basicConfig(level=logging.INFO) service = IngestionService() asyncio.run(service.run())
